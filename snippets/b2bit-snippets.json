{
  "Create useContext component": {
    "scope": "typescript,typescriptreact",
    "prefix": "b2context",
    "body": [
      "import React, { useContext, createContext } from 'react';",
      "",
      "interface ${2:${1}ContextValues} {}",
      "",
      "const ${1}Context = createContext<${2}>({} as ${2})",
      "",
      "interface ${3:${1}ProviderProps} {",
      "   children: React.ReactNode;",
      "}",
      "",
      "export const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}Provider:React.FC<${3}> = ({ children }) => {",
      "",
      "  return (",
      "<${1}Context.Provider value={{}}>",
      "   {children}",
      "   </${1}Context.Provider>",
      "   );",
      "};",
      "",
      "export const use${1} = () => {",
      "   const context = useContext(${1}Context);",
      "   return context;",
      "};"
    ],
    "description": "Create React Functional Component with useContext"
  },
  "Create custom hook with request": {
    "scope": "typescript,typescriptreact",
    "prefix": "b2hook",
    "body": [
      "import { useCallback } from 'react';",
      "",
      "import { endpoints, useApi } from '@contexts/Api';",
      "",
      "const use${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} = () => {",
      " const { request } = useApi();",
      "",
      " const ${2:list${1}} = useCallback(",
      " async (${3:params}: ${4:any}) => {",
      "     const response = await request<${5:any}>({",
      "         method: '${6|get,post,put,patch,delete|}',",
      "         url: endpoints.${7|public,private|}.${8:route},",
      "         params,",
      "         });",
      "         return response.data;",
      "     },",
      "     [request]",
      " );",
      "",
      " return { ${2} };",
      "};",
      "",
      "export default use${1};"
    ],
    "description": "Create b2-bit custom hook with request"
  },
  "Create functional b2-bit form": {
    "scope": "typescript,typescriptreact",
    "prefix": "b2form",
    "body": [
      "import React, { forwardRef, useImperativeHandle } from 'react'",
      "import { object } from 'yup';",
      "",
      "type ${2:${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}}Props = BaseStepProps<${1}FormValues>;",
      "",
      "const ${1}:React.ForwardRefRenderFunction<",
      "FormStepRef,",
      "${2}Props",
      "> = ({initialValues, onSubmit}, ref) => {",
      "",
      "const formikValidationSchema = object().shape({})",
      "",
      "const formik = useFormik({",
      " initialValues: {...initialValues}",
      " validationSchema: formikValidationSchema",
      " onSubmit",
      "});",
      "",
      "useImperativeHandle(ref, () => ({",
      " submit: formik.handleSubmit,",
      "}));",
      "",
      " return <div/>",
      "}",
      "",
      "export default forwardRef(${1});"
    ]
  },
  "Create a functional b2-bit controller": {
    "scope": "typescript,typescriptreact",
    "prefix": "b2controller",
    "body": [
      "import React from 'react'",
      "interface ${2:${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}}ControllerChildrenProps {}",
      "",
      "type ${2:${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}}Props = ControllerChildren<${1}ControllerChildrenProps>;",
      "",
      "const ${1}:React.FC<",
      "${2}Props",
      "> = ({ children }) => {",
      "",
      " return children({})",
      "}",
      "",
      "export default ${1};"
    ]
  },
  "Create functional b2-bit form with controller": {
    "scope": "typescript,typescriptreact",
    "prefix": "b2formController",
    "body": [
      "import React, { forwardRef, useImperativeHandle } from 'react'",
      "import { object } from 'yup';",
      "",
      "type ${2:${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}}Props = BaseStepProps<${1}FormValues>;",
      "",
      "const ${1}:React.ForwardRefRenderFunction<",
      "FormStepRef,",
      "${2}Props",
      "> = ({initialValues, onSubmit}, ref) => {",
      "",
      "const formikValidationSchema = object().shape({})",
      "",
      "const formik = useFormik({",
      " initialValues: {...initialValues}",
      " validationSchema: formikValidationSchema",
      " onSubmit",
      "});",
      "",
      "useImperativeHandle(ref, () => ({",
      " submit: formik.handleSubmit,",
      "}));",
      "",
      " return (",
      "   <FormController formik={formik}>",
      "     {({ register }) => (<>)",
      "   </FormController>",
      "  )",
      "}",
      "",
      "export default forwardRef(${1});"
    ]
  }
}
